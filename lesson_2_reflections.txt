What happens when you initialize a repository? Why do you need to do it?
	
	When we initialize a repository a new hidden directory called .git is created that contains all the metadata relating to the version history of the current repository. We need to initialize a repository to convert our project directory into a git repository whose history can then be tracked.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

	The staging area contains all the files that will be committed in the next commit. It is different from the working directory in the way that the working directory includes all the files in a directory but the staging area contains only the files whose changes are to be tracked.
	
	The staging area allows us to decide the size of and point in code at which we want to make a commit.

How can you use the staging area to make sure you have one commit per logical
change?

	We can compare the changes in the staging area to the most recent commit by running the command git diff —-staged. This gives us all the changes that have been made and added to the staging area.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

	Branches in Git are useful when we want to introduce an experimental feature or try out something that has no correlation to the current code. It helps to organize the code into different branches of commits and thus we can switch to the relevant branch when we want to work on a different approach to the problem at hand.

How do the diagrams help you visualize the branch structure?

	Git commit histories can become non-linear and thus difficult to keep a track of in one’s mind. Thus, diagrams help visualize the whole structure of a Git commit history and are a great visual tool.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

	When two branches are merged, the changes made in the commits of each of the branches are merged and the branch pointer of the current branch is updated to the new merge commit. These are represented so in the diagram because now the two branches have merged into a single one that contains all the commits and the changes made in them from the two branches.

What are the pros and cons of Git’s automatic merging vs. always doing merges
manually?

	The pros of automatic merging is that the coder does not have to pay attention to the code that someone else has written. The cons though have a much bigger impact since automatic merging may discard a piece of code that may render the whole code uncompilable.

Always doing merging manually can also be a pain as then each time we want to merge two branches we need to go through each and every change made to the file even if the files contain changes that are not related to each other. This would be too time consuming.
